package dump

import (
	"bytes"
	"testing"

	"github.com/spiegel-im-spiegel/gnkf/ecode"
)

var (
	textUTF8 = []byte("こんにちは，世界！\n私の名前は Spiegel です。")
	textSJIS = []byte{0x82, 0xb1, 0x82, 0xf1, 0x82, 0xc9, 0x82, 0xbf, 0x82, 0xcd, 0x81, 0x43, 0x90, 0xa2, 0x8a, 0x45, 0x81, 0x49, 0x0a, 0x8e, 0x84, 0x82, 0xcc, 0x96, 0xbc, 0x91, 0x4f, 0x82, 0xcd, 0x20, 0x53, 0x70, 0x69, 0x65, 0x67, 0x65, 0x6c, 0x20, 0x82, 0xc5, 0x82, 0xb7, 0x81, 0x42}
	textEUC  = []byte{0xa4, 0xb3, 0xa4, 0xf3, 0xa4, 0xcb, 0xa4, 0xc1, 0xa4, 0xcf, 0xa1, 0xa4, 0xc0, 0xa4, 0xb3, 0xa6, 0xa1, 0xaa, 0x0a, 0xbb, 0xe4, 0xa4, 0xce, 0xcc, 0xbe, 0xc1, 0xb0, 0xa4, 0xcf, 0x20, 0x53, 0x70, 0x69, 0x65, 0x67, 0x65, 0x6c, 0x20, 0xa4, 0xc7, 0xa4, 0xb9, 0xa1, 0xa3}
)

func TestOctet(t *testing.T) {
	testCases := []struct {
		text []byte
		res  string
		err  error
	}{
		{text: textUTF8, res: "0xe3, 0x81, 0x93, 0xe3, 0x82, 0x93, 0xe3, 0x81, 0xab, 0xe3, 0x81, 0xa1, 0xe3, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x96, 0xe7, 0x95, 0x8c, 0xef, 0xbc, 0x81, 0x0a, 0xe7, 0xa7, 0x81, 0xe3, 0x81, 0xae, 0xe5, 0x90, 0x8d, 0xe5, 0x89, 0x8d, 0xe3, 0x81, 0xaf, 0x20, 0x53, 0x70, 0x69, 0x65, 0x67, 0x65, 0x6c, 0x20, 0xe3, 0x81, 0xa7, 0xe3, 0x81, 0x99, 0xe3, 0x80, 0x82", err: nil},
		{text: textSJIS, res: "0x82, 0xb1, 0x82, 0xf1, 0x82, 0xc9, 0x82, 0xbf, 0x82, 0xcd, 0x81, 0x43, 0x90, 0xa2, 0x8a, 0x45, 0x81, 0x49, 0x0a, 0x8e, 0x84, 0x82, 0xcc, 0x96, 0xbc, 0x91, 0x4f, 0x82, 0xcd, 0x20, 0x53, 0x70, 0x69, 0x65, 0x67, 0x65, 0x6c, 0x20, 0x82, 0xc5, 0x82, 0xb7, 0x81, 0x42", err: nil},
		{text: textEUC, res: "0xa4, 0xb3, 0xa4, 0xf3, 0xa4, 0xcb, 0xa4, 0xc1, 0xa4, 0xcf, 0xa1, 0xa4, 0xc0, 0xa4, 0xb3, 0xa6, 0xa1, 0xaa, 0x0a, 0xbb, 0xe4, 0xa4, 0xce, 0xcc, 0xbe, 0xc1, 0xb0, 0xa4, 0xcf, 0x20, 0x53, 0x70, 0x69, 0x65, 0x67, 0x65, 0x6c, 0x20, 0xa4, 0xc7, 0xa4, 0xb9, 0xa1, 0xa3", err: nil},
		{text: []byte{0xff}, res: "0xff", err: nil},
		{text: nil, res: "", err: nil},
	}

	for _, tc := range testCases {
		str := OctetString(bytes.NewReader(tc.text))
		if str != tc.res {
			t.Errorf("OctetString() = \"%v\", want \"%v\".", str, tc.res)
		}
	}
}

func TestUnicodePoint(t *testing.T) {
	testCases := []struct {
		text []byte
		res  string
		err  error
	}{
		{text: textUTF8, res: "0x3053, 0x3093, 0x306b, 0x3061, 0x306f, 0xff0c, 0x4e16, 0x754c, 0xff01, 0x000a, 0x79c1, 0x306e, 0x540d, 0x524d, 0x306f, 0x0020, 0x0053, 0x0070, 0x0069, 0x0065, 0x0067, 0x0065, 0x006c, 0x0020, 0x3067, 0x3059, 0x3002", err: nil},
		{text: textSJIS, res: "", err: ecode.ErrInvalidUTF8Text},
		{text: textEUC, res: "", err: ecode.ErrInvalidUTF8Text},
		{text: []byte{0xff}, res: "", err: ecode.ErrInvalidUTF8Text},
		{text: nil, res: "", err: nil},
	}

	for _, tc := range testCases {
		str := UnicodePointString(bytes.NewReader(tc.text))
		if str != tc.res {
			t.Errorf("UnicodePointString() = \"%v\", want \"%v\".", str, tc.res)
		}
	}
}

/* Copyright 2020 Spiegel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
